Tuto d'après
https://git-scm.com/book/fr/v1/Les-bases-de-Git-Enregistrer-des-modifications-dans-le-dépôt

----------------------------------
1. congiguration et manipulation de fichiers dans l'index et le HEAD
----------------------------------
Vérifier l'utilisation du '$' selon la distribution git


----------------------------------
1.1 user.name et user.email
----------------------------------


$ git config --global user.name "js-dev88"
$ git config --global user.email js.dev88@gmail.com

----------------------------------
1.2 accès config
----------------------------------


git config --list
$ git config user.name

----------------------------------
1.3 editeur de texte
----------------------------------


$ git config --global core.editor emacs

----------------------------------
1.4 outil de différence
----------------------------------

$ git config --global merge.tool vimdiff

----------------------------------
1.5 help
----------------------------------

$ git help <verbe>
$ git <verbe> --help
$ man git-<verbe>

ex : $ git help config

---------------------------------------------------------------
1.6 Initialisation d'un dépôt Git dans un répertoire existant
---------------------------------------------------------------

Si vous commencez à suivre un projet existant dans Git, 
vous n'avez qu'à vous positionner dans le répertoire du projet et saisir :

$ git init

----------------------------------
1.7 Si vous souhaitez commencer à suivre les versions des fichiers existants 
----------------------------------

(contrairement à un répertoire vide), 
vous devriez probablement commencer par indexer ces fichiers et faire une validation initiale.

$ git add *.c
$ git add README
$ git commit –m 'version initiale du projet'

----------------------------------
1.8 Cloner un dépôt existant
----------------------------------

$ git clone git://github.com/schacon/grit.git

renommer projet pedant le clonage

$ git clone git://github.com/schacon/grit.git mongrit

----------------------------------
1.9 Vérifier l'état des fichiers
----------------------------------

$ git status

-> si clean depot local = depot serveur
 aucun fichier suivi n'a été modifié
Git ne voit pas non plus de fichiers non-suivis
Enfin, la commande vous indique sur quelle branche vous êtes. 
Pour l'instant, c'est toujours master, qui correspond à la valeur par défaut 

« Untracked » signifie simplement que Git détecte un fichier 
qui n'était pas présent dans le dernier instantané ;

-----------------------------------------------------------
1.10 Placer de nouveaux fichiers sous suivi de version
-----------------------------------------------------------

$ git add README.txt

/!\ Se place dans le répertoire du projet pour effectuer les commandes
Changes to be committed: => mis dans l'index
 Changes not staged for commit => pas encore indexer =>git add
Si on remodifie le fichier, il faut refaire un add autrement 
l'index n'est pas mis à jour

Pour les fichiers issus de la compilation d'un pgm (ex fichiers de logs) ou fichiers temporaires:
 Dans un tel cas, on peut énumérer les patrons de noms de fichiers à ignorer dans un fichier .gitignore
$ cat .gitignore
*.[oa]
*~

La première ligne ordonne à Git d'ignorer tout fichier se terminant en .o ou .a — d
es fichiers objet ou archive qui sont généralement produits par la compilation d'un programme. 
La seconde ligne indique à Git d'ignorer tous les fichiers se terminant par un tilde (~)

-----------------------------------------------------------
1.11 Ce qui a été modifié mais pas encore indexé
-----------------------------------------------------------
À présent, vous pouvez utiliser git diff pour visualiser les modifications non indexées :
$ git diff

pour visualiser ce qui a été indexé jusqu'à maintenant :
$ git diff --cached
$ git diff --staged


Il est important de noter que git diff ne montre pas les modifications 
réalisées depuis la dernière validation — seulement les modifications qui sont non indexées.

-----------------------------------------------------------
1.12 Valider vos modifications
-----------------------------------------------------------
Pour ajouter les fichiers indexés au HEAD

$ git commit

Pour ajouter les fichiers indexés au HEAD avec le résultat du git status

git commit -v

Pour committer directement avec le message de commit

git commit -m "Message"

[master (root-commit) d6028fa] Test commit README.txt
-Nom de la branche sur laquelle le commit a été effectué
-Sa somme de contrôle SHA-1 (d6028fa)
-Message du commit

Si on veut sauter l'étape d'indexation (pas recommandé) => -a
$ git commit -a -m 'added new benchmarks'

-----------------------------------------------------------
1.13 Effacer un fichier
-----------------------------------------------------------
$rm grit.gemspec
le fichier n'est plus suivi, il ne sera pas indexé
éliminer des fichiers en suivi de version (plus précisément, l'effacer dans la zone d'index) puis valider.

$ git rm grit.gemspec
l'effacement du fichier est indexé
a commande git rm réalise cette action mais efface aussi ce fichier de votre copie de travail de telle sorte que vous ne le verrez pas réapparaître comme fichier non suivi en version à la prochaine validation.

$ git rm -f grit.gemspec
Si vous avez auparavant modifié et indexé le fichier, son élimination doit être forcée avec l'option -f.

Un autre scénario serait de vouloir abandonner le suivi de version d'un fichier tout en le conservant dans la copie de travail. Ceci est particulièrement utile lorsqu'on a oublié de spécifier un patron dans le fichier .gitignore et on a accidentellement indexé un fichier, tel qu'un gros fichier de journal ou une série d'archives de compilation

$ git rm --cached readme.txt

-----------------------------------------------------------
1.14 Déplacer des fichiers
-----------------------------------------------------------
$ git mv nom_origine nom_cible


---------------------------------------------------------------
2. Les bases de Git - Visualiser l’historique des validations
---------------------------------------------------------------
---------------------------------------------------------------
2.1 Visualiser l’historique des validations (des commits)
---------------------------------------------------------------
$ git log

$ git log -p -2
Une des options les plus utiles est -p, qui montre les différences introduites entre chaque validation. Vous pouvez aussi utiliser -2 qui limite la sortie de la commande aux deux entrées les plus récentes 

$ git log --stat
Par exemple, si vous souhaitez visualiser des statistiques résumées pour chaque commit, vous pouvez utiliser l’option --stat 

---------------------------------------------------------------
2.2 Limiter la longueur de l’historique
---------------------------------------------------------------

$ git log --since=2.weeks

---------------------------------------------------------------
2.3 Annuler des actions
---------------------------------------------------------------
 Il faut être très attentif car certaines de ces annulations sont définitives (elles ne peuvent pas être elles-mêmes annulées)

pour modifier un message après un commit

$ git commit --amend

Par exemple, si vous validez une version puis réalisez que vous avez oublié d’indexer les modifications d’un fichier que vous vouliez ajouter à ce commit, vous pouvez faire quelque chose comme ceci :
$ git commit -m 'validation initiale'
$ git add fichier_oublie
$ git commit --amend

Vous n’aurez au final qu’un unique commit — la seconde validation remplace le résultat de la première.

---------------------------------------------------------------
2.3 Désindexer un fichier déjà indexé
---------------------------------------------------------------
git reset HEAD <fichier>...

après un git status on retrouve la commande
Juste sous le texte « Modifications qui seront validées », elle vous indique d’utiliser git reset HEAD 
<fichier>... pour désindexer un fichier. 

$ git reset HEAD CONTRIBUTING.md
La commande à taper peut sembler étrange mais elle fonctionne. Le fichier CONTRIBUTING.md est modifié mais de retour à l’état non indexé.


---------------------------------------------------------------
2.4 Désindexer un fichier déjà indexé
---------------------------------------------------------------
Que faire si vous réalisez que vous ne souhaitez pas conserver les modifications du fichier CONTRIBUTING.md ? Comment le réinitialiser facilement, le ramener à son état du dernier instantané (ou lors du clonage, ou dans l’état dans lequel vous l’avez obtenu dans votre copie de travail) ? 

Vous devriez aussi vous apercevoir que c’est une commande dangereuse : toutes les modifications que vous auriez réalisées sur ce fichier ont disparu — vous venez tout juste de l’écraser avec un autre fichier. N’utilisez jamais cette commande à moins d’être vraiment sûr de ne pas vouloir de ces modifications.

$ git checkout -- CONTRIBUTING.md


Souvenez-vous, tout ce qui a été validé dans Git peut quasiment toujours être récupéré. Y compris des commits sur des branches qui ont été effacées ou des commits qui ont été écrasés par une validation avec l’option --amend (se référer au chapitre Récupération de données pour la récupération de données). Cependant, tout ce que vous perdez avant de l’avoir validé n’a aucune chance d’être récupérable via Git.



